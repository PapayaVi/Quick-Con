<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>quickCon | chat</title>
    <link rel="icon" type="image/x-icon" href="https://img.icons8.com/arcade/64/omori-sprite.png" width="64" height="64" >
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.contextMenu.min.css">
    <link href="/css/dark.css" rel="stylesheet"/>
  
</head>
<body>
  <div class="container-fluid">
    <div class="wrapper justify-content-center">
      <div class="row gap-4" style="height: 100%;">

        <div class="panel col-2 p-2" >
          <div class="room-container" >
          </div>
        </div>

        <div class="panel col-6 p-2" >
          <div class="chat-container" >
            <div class="container-header sticky-top">
              General
            </div>
            <div class="message-area">
            </div>
            <div class="input-container">
              <form id="chat" autocomplete="off">
                <input type="text" id="chat-input" placeholder="Type a message...">
                <img class="chat-feature gif-icon" tabindex="0" src="https://cdn.glitch.global/ac4ea90c-58fd-4432-88fe-46984e31c59b/gif-square_10742203.png" data-bs-container="body" data-bs-toggle="popover"  data-bs-title="Emoji Search" data-bs-auto-close="outside" data-bs-placement="top" data-bs-content="."/>
                <img class="chat-feature emoji-icon rounded-pill" src="https://cdn.glitch.global/ac4ea90c-58fd-4432-88fe-46984e31c59b/emoji1.PNG" onmouseenter="" />
              </form>
            </div>
          </div>
        </div>

        <div class="panel col-2  p-2" >
          <div class="participant-container" >
            <div class="container-header sticky-top">
              Participants
            </div>
            <ul class="participant-container-list" id="participantarea" >


              <input type="text" id="participant-search" placeholder="Search participants...">
              <ul id="participant-container-list-container" class="participant-container-list">

              </ul>


            </ul>
          </div>
        </div>
      </div>
    </div>
    
  </div>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.contextMenu.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.ui.position.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mojs/core"></script>
    <script>
      var socket = io({
          withCredentials: true
        });
    </script>
    <% if (swalFire) { %>
      <script>
        function showLoginSwal() {
          Swal.fire({
            title: 'Login with Facebook',
            text: 'Click the button below to login with your Facebook account',
            icon: 'info',
            showCancelButton: false,
            confirmButtonText: '<i class="fa fa-facebook"></i> Login with Facebook',
            confirmButtonColor: '#3b5998',
            allowOutsideClick: false,
            allowEscapeKey: false,
            allowEnterKey: false,
            backdrop: true, // blur the background
            focusConfirm: false, // prevent Swal from being closed by clicking outside
          }).then((result) => {
            if (result.isConfirmed) {
              $.getScript('https://connect.facebook.net/en_US/sdk.js', function(){
                FB.init({
                  appId: '<%= $fb.app_id %>',
                  version: 'v13.0'
                });

                FB.getLoginStatus(function(response) {
                  if (response.status === 'connected') {
                    handleFacebookLogin(response);
                  } else {
                    FB.login(function(response) {
                      if (response.status === 'connected') {
                        handleFacebookLogin(response);
                      } else {
                        showLoginSwal(); 
                      }
                    }, {scope: 'public_profile'});
                  }
                });
              });
            }
          });
        }

        function handleFacebookLogin(response) {
          var accessToken = response.authResponse.accessToken;
          FB.api('/me', function(response) {
            var facebookId = response.id;
            var facebookName = response.name;
            const $data = {username : facebookName, userId : facebookId}
            // Store the Facebook ID and name in the session
            $.ajax({
              type: 'POST',
              url: '/set-facebook-session',
              data: {
                facebookId: facebookId,
                facebookName: facebookName
              },
              success: function() {
                socket.emit("participant-connect", $data)
                Swal.fire({
                  title: 'Login Successful!',
                  text: 'You have successfully logged in with your Facebook account.',
                  icon: 'success',
                  showCancelButton: false,
                  confirmButtonText: 'OK',
                  confirmButtonColor: '#3b5998',
                  allowOutsideClick: false,
                  allowEscapeKey: false,
                  allowEnterKey: false,
                  backdrop: true, // blur the background
                  focusConfirm: false, // prevent Swal from being closed by clicking outside
                }).then({
                  if(isConfirmed){
                    window.location.href="/"
                  }
                })
              }
            });
          });
        }

        showLoginSwal();
      </script>
    <% } %>
    <script src="/js/mo.js"></script>
    <script>
      
      $(document).ready(function (e) {
        let isScrolledUp = false;
        let isScrolling = false;
        $.ajaxSetup({ cache: true });
        const asset_url = 'https://cdn.glitch.global/ac4ea90c-58fd-4432-88fe-46984e31c59b/'
        const wrapper = $('.wrapper');
        let currentIndex = 0;
        const changeDelay = 10000; // change background every 10 seconds
        const fadeOutDelay = 1000;
        const backgroundImages = [
          'bg1',
          'bg2',
          'bg3',
          'bg4',
          'bg5',
          'bg6',
          'bg7',
          'bg8',
          'bg9',
        ]

        function changeBackground() {
          const bg_url = `${asset_url}${backgroundImages[currentIndex]}.jpg`;
          const backgroundImage = `url('${bg_url}')`;
          currentIndex = (currentIndex + 1) % backgroundImages.length; // loop through the array
          wrapper.addClass('fade-out');
          setTimeout(function () {
            wrapper.css('--bg-image', `${backgroundImage}`);
            wrapper.removeClass('fade-out');
            setTimeout(changeBackground, changeDelay);
          }, fadeOutDelay);
        }

        changeBackground();

        socket.emit('request-participant-list', () => {
          console.log("requesting  participant list");

        });

        function updateParticipant(participant) {
          const userElement = `
            <li class="participant-container-list-item" data-user-id="${participant.userId}" data-user-name="${participant.username}">
              <div class="sidebar-item">
                <span class="sidebar-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle profile-picture" viewBox="0 0 16 16">
                    <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
                    <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
                  </svg>
                </span>
                <span class="sidebar-label">${participant.username}</span>
              </div>
            </li>
          `;
          $('#participant-container-list-container').append(userElement);
        }

        socket.on('participant-connect', (res) => {
          const participantContainer = $('#participant-container-list-container');
          participantContainer.empty();
          $.each(res, (index, participant) => {
            updateParticipant(participant);
          });
        });

        socket.on('update-participant-list', (res) => {
          const participantContainer = $('#participant-container-list-container');
          participantContainer.empty();
          $.each(res, (index, participant) => {
            updateParticipant(participant);
          });
        });

        $.contextMenu({
          selector: '.participant-container-list-item',
          items: {
            copy: {
              name: "Copy username",
              callback: function (key, opt) {
                var $listItem = $(this);
                var $participantName = $listItem.find('span.sidebar-label');
                var text = $participantName.text();
                var textarea = document.createElement('textarea');
                textarea.value = text;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);
              }
            }
          }
        });

        let currentEmojiIndex = 0
        var emojiImages = [
          { name: "a_emoji1", tooltip: "hello" },
          { name: "a_emoji2", tooltip: "1" },
          { name: "a_emoji3", tooltip: "2" },
          { name: "a_emoji4", tooltip: "3" },
          { name: "a_emoji5", tooltip: "4" },
          { name: "a_emoji6", tooltip: "5" },
          { name: "a_emoji7", tooltip: "6" },
          { name: "a_emoji8", tooltip: "7" },
          { name: "a_emoji9", tooltip: "8" },
          { name: "a_emoji10", tooltip: "8" },
          { name: "a_emoji11", tooltip: "8" },
          { name: "a_emoji12", tooltip: "8" },
        ];

        $(".emoji-icon").mouseenter(function (e) {
          const heartN = [2, 12];
          const burstN = [10,12];
          const emoji_url = `${asset_url}${emojiImages[currentEmojiIndex].name}.PNG`
          const x = e.pageX, y = { [e.pageY]: e.pageY-150 };
          heartN.includes(currentEmojiIndex+1) ?  heartPop.tune({ x, y }).generate().replay() : burstN.includes(currentEmojiIndex+1) ? burst.tune({ x, y }).generate().replay() : '';
          $(this).attr("src", emoji_url);
          currentEmojiIndex = (currentEmojiIndex + 1) % emojiImages.length;
        });

        const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]')
        const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))

        const popover = new bootstrap.Popover('.gif-icon', {
          html: true,
          title: 'GIF | search',
          sanitize: false, // Allow HTML content in the popover
          container: 'body', // Append the popover to the body element
          width: 300, // Set a fixed width for the popover
        });

        $(document).on('shown.bs.popover', function (e) {

          const $popoverBody = $('.popover-body');

          // Create the search input and results container
          const searchInput = $('<input type="text" id="gif-search" placeholder="e.g. kel does cool backflip...">');
          const searchResultsContainer = $('<div id="gif-search-results"></div>');

          // Populate the popover body with the search input and results container
          $popoverBody.append(searchInput);
          $popoverBody.append(searchResultsContainer);

          // Add some basic CSS styles to the search input and results container
          searchInput.css({
            'width': '100%',
            'padding': '10px',
            'border': '1px solid #ccc'
          });
          searchResultsContainer.css({
            'padding': '10px'
          });

          // Attach the event listener to the search input
          searchInput.on('input', function () {
            const query = $(this).val();
            axios.get(`https://api.giphy.com/v1/gifs/search?api_key=SjGkqU46jwFhrqF4hcy5XD6E7HFgGzxt&q=${query}&limit=10&offset=0&rating=g&lang=en&bundle=messaging_non_clips`)
              .then(response => {
                const gifs = response.data.data;
                const searchResultsHtml = gifs.map(gif => {
                  if (gif.images && gif.images.fixed_height && gif.images.fixed_height.url) {
                    return `<img src="${gif.images.fixed_height.url}" alt="${gif.title}">`;
                  } else {
                    return '';
                  }
                }).join('');
                searchResultsContainer.html(searchResultsHtml);
              })
              .catch(error => {
                console.error(error);
              });
          });
        });

        $(document).on('shown.bs.popover', '.gif-icon', function () {
          $(this).css('opacity', 1);
        });

        $(document).on('hidden.bs.popover', '.gif-icon', function () {
          $(this).css('opacity', 0.4);
        });

        $('#chat-input').on('focus', function() {
          $('.chat-feature').addClass('focused');
        });

        $('#chat-input').on('blur', function() {
          $('.chat-feature').removeClass('focused');
        });

        function getCurrentTimeFormatted() {
          const date = new Date();
          const hours = date.getHours();
          const minutes = date.getMinutes();
          const ampm = hours >= 12 ? 'PM' : 'AM';
          const hours12 = hours % 12;
          const hours12String = hours12 === 0 ? '12' : hours12.toString();
          const minutesString = minutes.toString().padStart(2, '0');
          return `${hours12String}:${minutesString} ${ampm}`;
        }

        
        const chatInput = $('#chat-input');
        const chatArea = $('.message-area');

        chatArea.on('scroll', function() {
          if (chatArea[0].scrollHeight - (chatArea.scrollTop() + chatArea.innerHeight()) >= 420 ) {
            isScrolledUp = true;
          } else {
            isScrolledUp = false;
          }
        });

        $('#chat').submit(function (e) {
          e.preventDefault();
          const message = $('#chat-input').val();
          if (message.trim() === '') {
            chatInput.tooltip('show');
            return;
          } else {
            const $message_data = {
              userId : socket.userId,
              username : socket.username,
              message: message,
            }
            console.log($message_data)
            socket.emit('chat message', $message_data);
            chatInput.val(''); 
          }
        });

        socket.on('chat message', (res) => {
          const msg_time = `${res.username} - ${res.time}`
          const msg_feed = `
            <div class="${res.username === socket.username ? 'message-right' : 'message-left'}">
              <div class="message-wrapper">
                <div class="message">
                  <span class="message-time">${msg_time}</span>
                  <div>
                    ${res.username === socket.username ? '' : '<img src="https://cdn.glitch.global/ac4ea90c-58fd-4432-88fe-46984e31c59b/9.jpg" class="profile-picture" alt="Profile Picture">'}
                    
                    <span class="message-text">${res.message}</span>
                  </div>
                </div>
              </div>
            </div>`;
          chatArea.append(msg_feed);
          
          if (!isScrolledUp) {
            chatArea.scrollTop(chatArea[0].scrollHeight);
          }
        });

        $('#participant-search').on('input', () => {
            const searchQuery = $('#participant-search').val().toLowerCase();
            const participantListItems = $('#participant-container-list-container li');

            participantListItems.each((index, participantListItem) => {
              const participantName = $(participantListItem).find('.sidebar-label').text().toLowerCase();
              $(participantListItem).toggle(participantName.includes(searchQuery));
            });

            const visibleParticipantListItems = participantListItems.filter((index, participantListItem) => $(participantListItem).is(':visible'));
            if (visibleParticipantListItems.length === 0) {
              $('#participant-container-list-container').append('<li class="participant-container-list-item no-result">No results found</li>');
            } else {
              $('.no-result').remove();
            }
          });

      });
      
    </script>
</body>
</html>