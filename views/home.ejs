<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>quickCon | chat</title>
    <link rel="icon" type="image/x-icon" href="https://img.icons8.com/arcade/64/omori-sprite.png" width="64" height="64" >
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
    <link href="/css/dark.css" rel="stylesheet"/>
  
</head>
<body>
    <div class="navbar">
        <div class="navbar-title">quickCon</div>
        <div class="navbar-user">
            <span class="navbar-user-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                    <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
                    <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
                </svg>
            </span>
            <span class="navbar-user-name" id="username"></span>
        </div>
    </div>
        <div class="wrapper">
                <div class="chat-container">
                        <div class="chat-area">
                                
                        </div>
                        <form id="chat" class="chat-form" autocomplete="off">
                                <div class="input-area">
                                        <input type="text" class="input-box" id="chatbox" placeholder="Type your message..." data-toggle="tooltip" data-placement="top" title="Please enter a message!">
                                </div>
                        </form>
                        
                        
                </div>
                <div class="sidebar">
                        <div class="sidebar-header">Participants</div>
                        <ul class="sidebar-list" id="participantarea">
                        </ul>

                        <div class="sidebar-header">Player</div>
                        <ul class="sidebar-list">
                                <li class="sidebar-list-item">
                                        <div class="sidebar-item">
                                                <button type="button" class="btn btn-outline-secondary" id="soundboard-button-play">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play" viewBox="0 0 16 16">
                                                                <path d="M10.804 8 5 4.633v6.734zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C4.713 12.69 4 12.345 4 11.692V4.308c0-.653.713-.998 1.233-.696z"/>
                                                        </svg>
                                                </button>
                                                <span class="sidebar-label">Play</span>

                                        </div>
                                        
                                        <div class="sidebar-item">
                                                <button type="button" class="btn btn-outline-secondary" id="soundboard-button-stop">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stop-fill" viewBox="0 0 16 16">
                                                                <path d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5"/>
                                                        </svg>
                                                </button>
                                                <span class="sidebar-label">Stop</span>

                                        </div>

                                </li>
                        </ul>
                        <div class="sidebar-header">Settings</div>
                        <ul class="sidebar-list">
                                <li class="sidebar-list-item">
                                        <div class="sidebar-item">
                                                <button type="button" class="btn btn-outline-secondary" id="changebg">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-toggles2" viewBox="0 0 16 16">
                                                        <path d="M9.465 10H12a2 2 0 1 1 0 4H9.465c.34-.588.535-1.271.535-2s-.195-1.412-.535-2"></path>
                                                        <path d="M6 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6m0 1a4 4 0 1 1 0-8 4 4 0 0 1 0 8m.535-10a4 4 0 0 1-.409-1H4a1 1 0 0 1 0-2h2.126q.138-.534.41-1H4a2 2 0 1 0 0 4z"></path>
                                                        <path d="M14 4a4 4 0 1 1-8 0 4 4 0 0 1 8 0"></path>
                                                        </svg>
                                                </button>
                                                <span class="sidebar-label">BG</span>

                                        </div>

                                </li>
                        </ul>
                        
                </div>
        </div>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/bgchanger.js"></script>
    <script>
        $(document).ready(function (e) {
                
                var socket = io();
                let isScrolling = false;
                const participantArea = $('#participantarea');
                const chatArea = $('.chat-area');
               
                function getCurrentTime() {
                        const date = new Date();
                        const hours = date.getHours();
                        const minutes = date.getMinutes();
                        const ampm = hours >= 12 ? 'PM' : 'AM';
                        const hours12 = hours % 12;
                        const hours12String = hours12 === 0 ? '12' : hours12.toString();
                        const minutesString = minutes.toString().padStart(2, '0');
                        return `${hours12String}:${minutesString} ${ampm}`;
                }

                function fadeOut(audio, duration) {
                        let startTime = performance.now();
                        let fadeInterval = setInterval(() => {
                                let currentTime = performance.now();
                                let elapsed = currentTime - startTime;
                                let volume = 1 - (elapsed / duration);
                                audio.volume = volume;
                                if (elapsed >= duration) {
                                        clearInterval(fadeInterval);
                                        audio.pause();
                                        audio.currentTime = 0;
                                }
                        }, 10);
                }

                $('#chat').submit(function (e) {
                        e.preventDefault();
                        const getName = $('#username').text()
                        const message = $('#chatbox').val();
                        if (message.trim() === '') {
                                $('#chatbox').tooltip('show');
                                return;
                        }else{
                                socket.emit('chat message', message, getName);
                                $('#chatbox').val(''); // clear input field
                        }
                });
                                
                socket.on('chat message', (res) => {
                        const msg_time = `${res.user} - ${getCurrentTime()}`
                        
                        const msg_feed = `
                        <span class="message-time">${msg_time}</span>
                        <div class="message">
                                <span class="message-text">${res.message}</span>
                                
                        </div>`;
                        
                        chatArea.append(msg_feed); 
                        if (!isScrolling) {
                                chatArea.scrollTop(chatArea[0].scrollHeight);  
                        }else{
                                chatArea.animate({ scrollTop: chatArea[0].scrollHeight }, 500);
                        }
                });
                socket.on('user_disconnect', (res) => {

                        const username = res.user.replace(/-/g, "");
                    
                        $('#' + username).fadeOut('fast', function() {
                                $(this).remove();
                        });
                        
                        if (!isScrolling) {
                                chatArea.scrollTop(chatArea[0].scrollHeight);  
                              
                        }else{
                                chatArea.animate({ scrollTop: chatArea[0].scrollHeight }, 500);
                        }
                        
                        
                })
                socket.on('user_connect', (res) => {
                        $('#username').text(res)
                        socket.emit('add_participant')
                });
                
                socket.on('participant_connect', (res) => {
                        participantArea.empty();
                        $.each(res, (index, participant) => {
                                const username = participant.replace(/-/g, "");
                                const userElement = `
                                <li class="sidebar-list-item" id="${username}">
                                        <div class="sidebar-item">
                                                <span class="sidebar-icon">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                                                                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
                                                                <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
                                                        </svg>
                                                </span>
                                                <span class="sidebar-label">${participant}</span>
                                        </div>
                                </li>
                                `;
                                participantArea.append(userElement);
                        });
                })

                let audio = null;
                let soundFiles = [
                'https://cdn.glitch.global/ac4ea90c-58fd-4432-88fe-46984e31c59b/Dreary%20Night.mp3',
                'https://cdn.glitch.global/ac4ea90c-58fd-4432-88fe-46984e31c59b/test.mp3'
                ];
                let currentSoundIndex = 0;
                let glowing = false;

                function playNextSound() {
                        // Increment the sound index
                        currentSoundIndex = (currentSoundIndex + 1) % soundFiles.length;

                        // Stop the current sound if it's playing
                        if (audio) {
                                audio.pause();
                        }

                        // Create a new Audio object for the next sound
                        audio = new Audio(soundFiles[currentSoundIndex]);
                        audio.loop = false;
                        audio.volume = 0.5;

                        // Add an event listener to the ended event
                        audio.addEventListener('ended', () => {
                                // Remove the glowing class when the audio ends
                                if (glowing) {
                                        $('#soundboard-button-play').removeClass('glowing');
                                        glowing = false;
                                }
                        });

                        // Play the sound
                        audio.play();

                        // Emit the soundboardStart event
                        socket.emit('soundboardStart');

                        // Add the glowing class when the audio starts playing
                        if (!glowing) {
                                $('#soundboard-button-play').addClass('glowing');
                                glowing = true;
                        }
                }

                $('#soundboard-button-play').on('click', playNextSound);

                $('#soundboard-button-stop').on('click', () => {
                        socket.emit('soundboardStop');
                });

                socket.on('playSound', () => {
                        if (audio) {
                                audio.play();
                        } else {
                                console.log("no sound file");
                        }
                });

                socket.on('stopSound', () => {
                        if (audio) {
                                audio.pause();
                                audio.currentTime = audio.duration;
                        }
                        // Remove the glowing class when the audio stops playing
                        if (glowing) {
                                $('#soundboard-button-play').removeClass('glowing');
                                glowing = false;
                        }
                });
                
                $('.chat-area').on('scroll', () => {
                        isScrolling = true;
                });

                $('.chat-area').on('scrollstop', () => {
                        isScrolling = false;
                });

                $('.wrapper').css('--bg-image', `url(${images[0]})`);
        });
    </script>
</body>
</html>